<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:redisson="http://redisson.org/schema/redisson"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
		                http://www.springframework.org/schema/context 
		                http://www.springframework.org/schema/context/spring-context-4.3.xsd
		                http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache.xsd
                        http://www.springframework.org/schema/tx 
          				http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          				http://redisson.org/schema/redisson
          				http://redisson.org/schema/redisson/redisson.xsd">

                        

	<context:property-placeholder location="classpath:redis.properties,classpath:redis-cluster.properties,classpath:redis-sentinel.properties"
		ignore-unresolvable="true" />


	<tx:annotation-driven /> 
	<context:component-scan base-package="com.james.cache.utils">
	</context:component-scan>
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="100" />
		<property name="maxIdle" value="10" />
	</bean>
	
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		destroy-method="destroy">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="database" value="${redis.database}" />
		<property name="timeout" value="${redis.timeout}" />
		<property name="usePool" value="true" />
		<property name="password" value="${redis.password}"/>
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	
	
	
	
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
    <bean  id ="JdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
  
    <bean  id="GenericToStringSerializer" class="org.springframework.data.redis.serializer.GenericToStringSerializer"  
            c:type="java.lang.Long"/>  
	
	
    <cache:annotation-driven/>

	<!-- declare Redis Cache Manager -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg index="0" ref="redisTemplate"></constructor-arg>
	</bean>
	<!-- redis sentinel 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxTotal" value="${im.hs.server.redis.maxTotal}" />  
        <property name="minIdle" value="${im.hs.server.redis.minIdle}" />  
        <property name="maxWaitMillis" value="${im.hs.server.redis.maxWaitTime}" />  
        <property name="maxIdle" value="${im.hs.server.redis.maxIdle}" />  
        <property name="testOnBorrow" value="${im.hs.server.redis.testOnBorrow}" />  
        <property name="testOnReturn" value="true" />  
        <property name="testWhileIdle" value="true" />  
    </bean>  
  
    <bean id="sentinelConfiguration"  
        class="org.springframework.data.redis.connection.RedisSentinelConfiguration">  
        <property name="master">  
            <bean class="org.springframework.data.redis.connection.RedisNode">  
                <property name="name" value="${im.hs.server.redis.sentinel.masterName}"></property>  
            </bean>  
        </property>  
        <property name="sentinels">  
            <set>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host"  
                        value="${im.hs.server.redis.sentinel1.host}"></constructor-arg>  
                    <constructor-arg name="port"  
                        value="${im.hs.server.redis.sentinel1.port}"></constructor-arg>  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host"  
                        value="${im.hs.server.redis.sentinel2.host}"></constructor-arg>  
                    <constructor-arg name="port"  
                        value="${im.hs.server.redis.sentinel2.port}"></constructor-arg>  
                </bean>  
                <bean class="org.springframework.data.redis.connection.RedisNode">  
                    <constructor-arg name="host"  
                        value="${im.hs.server.redis.sentinel3.host}"></constructor-arg>  
                    <constructor-arg name="port"  
                        value="${im.hs.server.redis.sentinel3.port}"></constructor-arg>  
                </bean>  
            </set>  
        </property>  
    </bean>  
  
    <bean id="sentinelConnectionFactory"  
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="password" value="${im.hs.server.redis.sentinel.password}"></property> 
        <constructor-arg name="sentinelConfig" ref="sentinelConfiguration"></constructor-arg>  
        <constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>  
    </bean>
	<!-- redis sentinel 配置结束 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="sentinelConnectionFactory" />
		<property name="keySerializer" ref="stringRedisSerializer"/>
			 
		<property name="valueSerializer" ref="stringRedisSerializer"/>
		
		<property name="enableTransactionSupport" value="false"></property>
	</bean>
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.DefaultValueOperations">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>
	<bean id="hashRedisTemplate" class="org.springframework.data.redis.core.DefaultHashOperations">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>
	<bean id="listRedisTemplate" class="org.springframework.data.redis.core.DefaultListOperations">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>
	<bean id="setRedisTemplate" class="org.springframework.data.redis.core.DefaultSetOperations">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>
	<bean id="zSetRedisTemplate" class="org.springframework.data.redis.core.DefaultZSetOperations">
		<constructor-arg ref="redisTemplate"></constructor-arg>
	</bean>
	<!-- cluster 集群配置 -->
	 <bean id="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
        <property name="maxTotal" value="${maxTotal}" />
        <property name="minIdle" value="${minIdle}" />
        <property name="maxIdle" value="${maxIdle}" />
        <property name="maxWaitMillis" value="${maxWaitMillis}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
    </bean>
	<bean id="jedisCluster" class="com.shidebin.mongodb.spring_redis.JedisClusterFactory">
        <property name="addressConfig" value="classpath:redis-cluster.properties"/>
        <property name="addressKeyPrefix" value="address" />
        <property name="timeout" value="${timeout}" />
        <!--代表集群有几台redis-->
        <property name="maxRedirections" value="${maxRedirections}" />
        <property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" />
    </bean>
	<!-- redis cluster 集群配置结束 -->
</beans>
